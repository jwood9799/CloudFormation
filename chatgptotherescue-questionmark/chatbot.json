{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Launches an Auto Scaling group with t2.micro instances in two public availability zones in a new VPC, creates an EC2 role with an AWS managed policy, sets the minimum and maximum instances to 2 and 5, creates a public-facing Application Load Balancer (ALB) with two target groups and a target policy set to scale once CPU utilization goes above 50%, and installs Apache on each instance upon launch.",
    "Parameters": {},
    "Resources": {
      "Vpc": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
          "CidrBlock": "10.0.0.0/16",
          "EnableDnsSupport": "true",
          "EnableDnsHostnames": "true",
          "Tags": [
            {
              "Key": "Name",
              "Value": "my-vpc"
            }
          ]
        }
      },
      "InternetGateway": {
        "Type": "AWS::EC2::InternetGateway",
        "Properties": {
          "Tags": [
            {
              "Key": "Name",
              "Value": "my-internet-gateway"
            }
          ]
        }
      },
      "AttachGateway": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "VpcId": {
            "Ref": "Vpc"
          },
          "InternetGatewayId": {
            "Ref": "InternetGateway"
          }
        }
      },
      "PublicSubnet1": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": {
            "Ref": "Vpc"
          },
          "CidrBlock": "10.0.1.0/24",
          "AvailabilityZone": "us-west-2a",
          "Tags": [
            {
              "Key": "Name",
              "Value": "my-public-subnet-1"
            }
          ]
        }
      },
      "PublicSubnet2": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": {
            "Ref": "Vpc"
          },
          "CidrBlock": "10.0.2.0/24",
          "AvailabilityZone": "us-west-2b",
          "Tags": [
            {
              "Key": "Name",
              "Value": "my-public-subnet-2"
            }
          ]
        }
      },
      "RouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {
            "Ref": "Vpc"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": "my-route-table"
            }
          ]
        }
      },
      "InternetRoute": {
        "Type": "AWS::EC2::Route",
        "DependsOn": "AttachGateway",
        "Properties": {
          "RouteTableId": {
            "Ref": "RouteTable"
          },
          "Destination": {
            "DestinationCidrBlock": "0.0.0.0/0"
          },
          "GatewayId": {
            "Ref": "InternetGateway"
          }
        }
      },
      "PublicSubnet1RouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
          "SubnetId": {
          "Ref": "PublicSubnet1"
          },
          "RouteTableId": {
          "Ref": "RouteTable"
          }
          }
          },
      "PublicSubnet2RouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
          "SubnetId": {
          "Ref": "PublicSubnet2"
          },
          "RouteTableId": {
          "Ref": "RouteTable"
          }
          }
          },
          "InstanceProfile": {
          "Type": "AWS::IAM::InstanceProfile",
          "Properties": {
          "Path": "/",
          "Roles": [
          {
          "Ref": "EC2Role"
          }
          ]
          }
          },
          "EC2Role": {
          "Type": "AWS::IAM::Role",
          "Properties": {
          "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
          "Effect": "Allow",
          "Principal": {
          "Service": "ec2.amazonaws.com"
          },
          "Action": "sts:AssumeRole"
          }
          ]
          },
          "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
          ],
          "Path": "/"
          }
          },
          "LaunchConfig": {
          "Type": "AWS::AutoScaling::LaunchConfiguration",
          "Properties": {
          "ImageId": "ami-0c55b159cbfafe1f0",
          "InstanceType": "t2.micro",
          "IamInstanceProfile": {
          "Ref": "InstanceProfile"
          },
          "SecurityGroups": [
          {
          "Ref": "InstanceSecurityGroup"
          }
          ],
          "UserData": {
          "Fn::Base64": {
          "Fn::Join": [
          "",
          [
          "#!/bin/bash\n",
          "yum update -y\n",
          "yum install -y httpd\n",
          "chkconfig httpd on\n",
          "service httpd start\n"
          ]
          ]
          }
          }
          }
          },
          "InstanceSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
          "GroupDescription": "Enable HTTP access",
          "SecurityGroupIngress": [
          {
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
          }
          ],
          "VpcId": {
          "Ref": "Vpc"
          }
          }
          },
          "ALB": {
          "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
          "Properties": {
          "Name": "my-load-balancer",
          "Subnets": [
          {
          "Ref": "PublicSubnet1"
          },
          {
          "Ref": "PublicSubnet2"
          }
          ],
          "SecurityGroups": [
          {
          "Ref": "ALBSecurityGroup"
          }
          ]
          }
          },
         "ALBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
              "DefaultActions": [
                {
                  "Type": "forward",
                  "TargetGroupArn": {
                    "Ref": "TargetGroup1"
                  }
                }
              ],
              "LoadBalancerArn": {
                "Ref": "ALB"
              },
              "Port": 80,
              "Protocol": "HTTP"
            }
          },
          "TargetGroup1": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
              "HealthCheckIntervalSeconds": 30,
              "HealthCheckPath": "/",
              "HealthCheckProtocol": "HTTP",
              "HealthCheckTimeoutSeconds": 5,
              "HealthyThresholdCount": 2,
              "Name": "target-group-1",
              "Port": 80,
              "Protocol": "HTTP",
              "UnhealthyThresholdCount": 2,
              "VpcId": {
                "Ref": "Vpc"
              }
            }
          },
          "TargetGroup2": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
              "HealthCheckIntervalSeconds": 30,
              "HealthCheckPath": "/",
              "HealthCheckProtocol": "HTTP",
              "HealthCheckTimeoutSeconds": 5,
              "HealthyThresholdCount": 2,
              "Name": "target-group-2",
              "Port": 80,
              "Protocol": "HTTP",
              "UnhealthyThresholdCount": 2,
              "VpcId": {
                "Ref": "Vpc"
              }
            }
          },
          "ALBListenerRule1": {
            "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "Properties": {
              "Actions": [
                {
                  "Type": "forward",
                  "TargetGroupArn": {
                    "Ref": "TargetGroup1"
                  }
                }
              ],
              "Conditions": [
                {
                  "Field": "cpu_utilization",
                  "Values": [
                    "50"
                  ],
                  "Operator": "greater-than"
                }
              ],
              "ListenerArn": {
                "Ref": "ALBListener"
              },
              "Priority": 1
            }
          },
          "ALBListenerRule2": {
            "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "Properties": {
              "Actions": [
                {
                  "Type": "forward",
                  "TargetGroupArn": {
                    "Ref": "TargetGroup2"
                  }
                }
              ],
              "Conditions": [
                {
                  "Field": "cpu_utilization",
                  "Values": [
                    "50"
                  ],
                  "Operator": "greater-than"
                }
              ],
              "ListenerArn": {
                "Ref": "ALBListener"
              },
              "Priority": 2
            }
          },
          "AutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
              "AutoScalingGroupName": "my-auto-scaling-group",
              "LaunchConfigurationName": {
                "Ref": "LaunchConfig"
              },
              "MaxSize": "5",
              "MinSize": "2",
              "VPCZoneIdentifier": [
                {
                  "Ref": "PublicSubnet1"
                },
                {
                  "Ref": "PublicSubnet2"
                }
              ],
              "AvailabilityZones": [
                {               

                
                    "Fn::Select": [
                        "0",
                        {
                          "Fn::GetAZs": {
                            "Ref": "AWS::Region"
                          }
                        }
                      ]
                    },
                    {
                      "Fn::Select": [
                        "1",
                        {
                          "Fn::GetAZs": {
                            "Ref": "AWS::Region"
                          }
                        }
                      ]
                    }
                    ],
                    "Tags": [
                      {
                        "Key": "Name",
                        "Value": "my-auto-scaling-group"
                      }
                    ]
                  }
                }
              }
            }
                  